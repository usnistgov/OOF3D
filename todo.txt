TODO LIST FOR OOF3D


Before Next Release
-------------------

Copy statgroups image segmentation from OOF2.

Use macports lapack instead of Accelerate framework?  See
   https://github.com/opencollab/arpack-ng/issues/149#issuecomment-419715128
   http://octave.1599824.n4.nabble.com/Issues-with-eigs-td4689314.html#a4689334

Resurrect the Mesh Data Viewer and restore the toolbox.

Find a situation in which an error or warning dialog is hidden and see
if replacing self.window.raise_() with self.window.present() in
SubWindow.raise_window() in common/IO/GUI/subWindow.py fixes it.

Check for an X11 connection before running anything that might fail if
there is no connection, so that a useful error message can be
provided.  The first failure may be in widgetFontSizes in gtktuils.py.

Optimize categoryVolumes?  Use bins the way OOF2 does.

Merge branches
  Lizhong's solvers.

Use tcmalloc (already in Lizhong's branch?)

Use Eigen?  Use DPF's sparse_matrix_optimization branch?
  On 7/17/17, merged origin/development into
  sparse_matrix_optimization.  The difference in performance on
  solver_test.py/static_quadratic_set was negligible.


Fix bug: Using upper-right corner arrows for switching views sometimes
draws the canvas in the wrong location.

Fix bug: Typing to select a line in the file chooser isn't working on
Mac.  Upgrade to gtk+3 required?

Fix bug?  Drag and drop on layer list on Mac/Cocoa can result in
duplicate entries in list, and the layers aren't actually reordered.
The signal for deleting the list entry isn't being sent.  Doing
anything that forces the list to be redrawn fixes it.  (Upgrade to
gtk3 before fixing.)


Add an 'editable' keyword argument to all Parameters, with default
value True.  Parameters that aren't editable appear in ParameterTable
but can't be edited by the user.  Make the Point parameters in
selection toolboxes uneditable, since they should come only from the
canvas and the user shouldn't type in them.  Doing this will require
changing all Parameter classes, so it should be done only after all
the other selection gui changes to keep the git commits reasonable.

Remove the BitmapOverlay class.  It's not used for graphics
anymore. It's only used to provide a quick way to see if a voxel is
selected, but an array of bools would suffice there.

Make sure that Active Volumes are respected for all voxel & skeleton
selection operations.

Skeleton Info toolbox is raising incorrect warning message when
clicking on an element.  Fixed, sort of.. It should raise the warning
only for the active mode.

Bug?  Stop a SnapNodes operation part way through, then try to save
the Skeleton.  Crash?  Load LOGO3D/oof3d-nT2l6n.py and then try to
save the Skeleton.  Maybe not related to interrupting SnapNodes.

Copy from OOF2: display selection sizes as percentages as well as
absolute numbers in main pages and toolboxes.

--------------------------------------------------------------------------
Soon
----

Lloyd's algorithm for smoothing?  Move nodes to the centroid of their
Voronoi cell, then reconnect edges.  How does this ensure that the
mesh is tetragonal? (Mesh is tet if all Voronoi edges have only 3
faces -- no degeneracy allowed.) Use voro++ for Voronoi computation.

Make Pin Nodes work like selections.  Shift-click pins without
unpinning. Ctrl-click toggles.  Plain-click unpins all before
pinning.  Use new generic selection machinery.

There are a number of cases (in the skeleton selection couriers and
probably elsewhere) in which the user chooses a range, setting both a
min and a max value.  It would be convenient to have a Parameter and a
Widget for this.  The widget would ensure that min <= max.  Probably
there should be two Parameters whose widgets communicate with each other.

Add a surface-smoothness-energy so surface smoothing works better.

User-settable behavior for mouse buttons, so that more than one mouse
button can be used and it's not necessary to use the
Select/Tumble/Dolly/etc buttons at the top of the canvas.  Also enable
scroll wheels.
  
Reduce memory use by optionally using chars instead of ints for the
voxel category: CMicrostructure::categorymap is Array<char>.   Can
images be stored with fewer bytes?  Make the type of a category be
settable at build time, in case users need more than 256 categories?

Profile VSB construction on a large image with complicated category
structures.  Does it need to be optimized?  See TODO in
CMicrostructure::categorize() wrt not creating the full array of
ProtoVSBNodes.

Write a python build script that doesn't use distutils.
Move swig output to the build directory, and remove SRC/SWIG3D).  The
way it is now, building dist3d after building debug3d fails, because
the swig output files contain code generated from #ifdef DEBUG blocks,
but those output files are in SRC/SWIG3D and aren't rebuilt when the
build options are changed.  Do this in 2D too.

Move output operations to C++.  See TODO in
FilledContourDisplay.setData in engine/IO/contourdisplay.py.

Write CSkeletonFace::homogeneity()

Allow graphics windows to be synched, so that view changes in one are
done in all.

Change AutoWidgets so that they return automatic.automatic if the text
box is empty.  Get rid of the check button.  See TODO in
parameterwidgets.py.

Upgrade to gtk3.  Possibly switch to the VTK event loop instead of the
gtk event loop, so that we can use VTK interactors and widgets.

Warn when saving a Mesh that only contains empty elements.  Maybe
don't allow any operations at all on such a Mesh.

Adding the super-cautious destructor to SubDimensionalSet in
edgeset.spy removed some shut-down warnings about FaceSet when running
scheduled_output_test.py in the regression tests.  Does that mean that
there's a memory leak and some FaceSets aren't being deleted properly?

Draw voxels on the faces of the box widget when selecting voxel
regions.  Maybe.

Fix bug: load5color.log; open graphics window; add clipping plane
w/default values (x, offset=0); drag clipping plane to right.  Front
face of image is not rendered.  Modifying the view in any way fixes
it.  Currently avoided this problem by choosing different default
values for the clipping plane.

Draw selected and pinned nodes as spheres instead of circles?  This
might make them more visible, especially at nodes with lots of edges.
Would it be too slow?

Ellipsoid selection via mouse.

Rubberband drawing.

GUI interface for moving nodes

Display perimeter

Axis tick marks, numerical labels?

Get rid of CompoundField class.  It's not necessary in 3D.  Will
getting rid of it make the 2D and 3D code too different?

Add a hybrid homogeneity algorithm that counts pixels for large
well-shaped elements and uses VSB for small elements or high aspect
ratios elements.  Maybe -- the pixel counting algorithm still has the
problem of being insensitive to small node motions.

----------------------------------------------------------------------------
At Some Later Time
------------------

Parallelize categoryVolumes.

Migrate to Python 3.x

Convert pixel category array to octree, and construct voxel set
boundaries from the octree, or compute element homogeneity from octree
elements instead of voxels.  Maybe.



BUGS TO FIX

Display a contour plot.  Set contour display's filter to "Selected".
Select a (skeleton) element.  Crash!  Selecting an element before
setting the filter doesn't crash.
 The problem is that selecting the element changes the filter's
 output, but doesn't change the filter parameter of the
 FilledContourDisplay, so FilledContourDisplay.setData isn't called.

Contour displays are incorrect when the elements are filtered.
  Same problem as above, probably.

Fix the binary installer.

-------------------------------------------------------------------------
-------------------------------------------------------------------------

FIXED OR OTHERWISE DISPOSED OF

Fix bug:  open two graphics windows on Linux.  Close the first one with the
window manager close button.  The program will crash.
Changes that prevent crashing:
   Comment out call to Render
   Run on Mac with Cocoa
Changes that don't prevent crashing:
   Don't add renderer to render_window.
   Remove renderer from render_window at start of destroyCB.
   Toolboxes aren't removed in GfxWindowBase.destroyCB.
   No layers created (immediate return in createPredefinedLayers,
      don't create axes)
   Switch to vtk8. -- Crashes when closing just 1 graphics window, using
     either the menu item (seg fault) or the window manager (X11 error),
     even when Render call is commented out.
     * Seg fault is in
       PlaneAndArrowLayer::destroy->OOFCanvasLayer::removeAllProps. When
       no layers are defined, closing with either the menu item or the
       window manager leads to the X11 error, so there may be two
       separate problems.  Fixed that... Now there's an x11 error in both cases.
** Fixed 2017-12-05


Upgrade VTK
** Finished(?) 2017-12-05

Fix this TODO in ghostgfxwindow.py: After cloning a window containing
only a hidden image layer and showing the layer in the clone, the
image is drawn at the wrong size and with a black border. Making any
change to the view fixes it.
** Can't reproduce with vtk 7.1.1, 2017-12-06

Mesh Material display not working?
** Fixed 2017-12-06  CellData wasn't being included in MeshGridSource::GetGrid

Fix bug: Adjust gfx window main pane divider, then clone window.
Canvas size and divider position don't agree.  Clicking on canvas may
select the wrong item.  Also, if the graphics window is created in a
script, the canvas is the wrong size when the window opens.
** Fixed 2017-12-15 as part of the next item.
Fix bug: Loading a script containing a Graphics.Settings.Camera.View
command can leave the render window misaligned with the drawing
area. The size_x and size_y arguments should be removed.  The View
object shouldn't include size information.
** Fixed 2017-12-15.  The size information is needed to properly record
and reproduce mouse clicks. GhostOOFCanvas:set_view should ignore the
size information *except* when reproducing mouse clicks.

Fix bug: Skeleton Info display isn't working.  Is Mesh Info working?
** Fixed 2017-12-15.  setEmpty() wasn't being called.  Pixel Info and
Mesh Info weren't working either.

Fix bug: Displaying filtered Skeletons and Meshes leads to errors
like:
Warning: In /Users/langer/UTIL/VTK/VTK-8.1.0.rc2/Common/DataModel/vtkDataSet.cxx, line 476
vtkUnstructuredGrid (0x7fd2d39a6cc0): Cell array  with 1 components, has 1871 tuples but there are only 689 cells
eg, SCRATCH/meshmaterialdisplay2.log: Load 5color, group voxels, assign 2
materials to groups, display mesh material filtered by one material.
Wrong materials are shown, and get error.
** Fixed 2017-12-18  Had to reset cell data in MaterialDisplay.setParams.

Mesh filled contour display not working?
** Seems to be ok.  2017-12-18  Probably because of the above.

Try calling vtkRenderWindow::SetUseOffScreenBuffers(1).  It caused
problems before, but other things have been fixed since then.  It
might reduce graphics flickering on the VMs.
** Doesn't seem to help.  2017-12-18

Fix bug: Clearing groups (individually or all at once) doesn't clear
the display when a Skeleton display is filtered by group.
  Group changes aren't leading to SkeletonGridSource::GetGrid
  Filters need to be notified that their groups have changed, and they
  can call SkeletonFilter::setModified.
** Fixed 2017-12-19 by copying the code that already did this from
ContourDisplay.

Fix bug: Display skeleton filtered by element group.  Edit layer.
Wrong group is displayed initially for filter param in dialog box.
Problem occurs in other ElementGroupParameter widgets too.
** Fixed 2017-12-19.  SkeletonGroupWidgets had no set_value method and
weren't calling it in their __init__.  OOF2 appears to have the same problem.

Fix bug: Are element groups/materials not being recomputed for
refinement undo/redo?  Or are filters on the skeleton displays not
updating?
  Use Auto to create element groups.
  Display skeleton edges and materials limited to some groups.
  Undo/Redo refinement
  Elements in other groups appear.
** Fixed? 2017-12-19  I can't reproduce this.  Maybe it's been fixed,
or maybe it was based on a misunderstanding.  Material inheritance is
different from group inheritance, so it's possible that element groups
created from pixel groups will contain more than one material after
refinement, even if the pixel groups correspond 1:1 to materials.

Missing feature: contextual menu in layer list.
** Added. 2018-01-19

Tumbling large images or Microstruture Material displays can be very
slow because it takes a long time to recompute the center point.
Either find a faster way to compute the center, or make computing the
center optional and re-use the old point.
** Done, but not removed from the todo list until later...

Missing feature: raise and lower layers, by menu or drag-and-drop.
** 2018-01-19: Revived the OOF2 raising and lowering menu items and GUI.
Still need to implement DisplayMethod.raise_layer and
DisplayMethod.lower_layer.  Layer ordering will have to translate to
SetRelativeCoincidentTopologyPolygonOffsetParameters parameters.
** 2018-01-2?  Done.  Needs vtk bug fix. Version 9.0.0 has it.

Fix bug?  Edit a clipping plane by double-clicking in the list in the
toolbox, and change the convertible RC to "angles". It's possible to
get the error "Parameter value out of range for phi".
**  Fixed.  2018-01-31  atan2 returns -180->180 angles, but
AngleDirection was expecting 0->360.

Fix bug or badly designed feature: Select voxels or skeleton
components while a clipping plane plane-and-arrow widget is displayed.
It's not clear whether clicking on the widget should be interpreted as
a selection operation or not.   Probably the widget should not be
visible unless the Viewer toolbox is active, or should be drawn
faintly (without its arrow?).  Maybe there should be auto-dim and
auto-hide options in the layer plane-and-arrow settings.
** Done: 2018-02-02

Fix this: When both an Image and a Microstructure material layer are
displayed, and one or both has a filter applied so that both should be
visible, only the top one is visible.
BitmapDisplayMethod.layersChanged hides all but the topmost image
layer, and applies the overlayer pipeline to it.  This is wrong.
Probably we should display all images and replace the overlayer
pipeline with separate translucent vtk layers and rely on vtk's
coincident object resolution.  Will that be too slow for drawing
selected voxels?
** Done: 2018-04-05

Restore Skeleton selection toolboxes.
Fix sensitization of undo/redo buttons in selection toolboxes.
** Done: 2018-04=29

Fix the Skeleton Info toolbox.
** Done: 2018-04-30.  Hadn't been updated for new mousehandler args.

Fix selection commands in the Pixel Page, which broke when the menu
items were changed for the pixel selection toolbox.
** Done? 2018-04-30  It seems to work.  Not sure what prompted this TODO.

Fix this: Display only the white voxel group.  Clicking to select a
single pixel on some faces (faces with normals in the +x, +y, or +z
directions?) of the group selects the neighboring voxel instead.
** Done: 2018-05-01.  GhostOOFCanvas::findClickedCellCenterMulti
wasn't actually computing the cell center. Copied cell center
computation from findClickedCellCenter.

Add an "Invert" button to the Voxel Selection page, as in the Skeleton
Selection page.
** Done: 2018-05-01

Voxel section methods are crashing when the click is outside the
microstructure.
** Fixed: 2018-05-01

Clicking on an empty canvas with the voxel selection toolbox active
crashes the program.  
** Fixed: 2018-05-16

Toolbox names have inconsistent underscores.
** Fixed: 2018-05-16

Update tests that broke when selection method parameters were
changed.
** Done: 2018-05-17

Box widget should not be startable if there are no selectable layers.
Doing so leads to a hung thread.  What if layer is deleted while
widget is active?
** Fixed, I think.  2018-05-17.  The widget is still startable, but
the menuitem isn't invoked if there are no layers.  This solves the
problem when layers are deleted while the widget is up.

Bug: Voxels selected at the time a graphics window is opened aren't
highlighted.
** Fixed: 2018-05-17

In tumble mode, view sometimes jumps on first move event.  Laptop only!
** Fixed: 2018-05-20.  rescaleFudgeFactor wasn't being used everywhere
it should have been in oofcanvas3D.C.

Prev and Next buttons in the Skeleton Selection page aren't working.
Check the Voxel Selection page.
** Fixed: 2018-05-22

Selecting elements by dominant pixel when there is no image or
microstructure displayed isn't working.
** 2018-05-22: Added "if msorimage is not None" to
PixelElementSelectorGUI.up, which sort of avoids the problem without
fixing it. The menu item is never called if the click doesn't select a
voxel.  Also fixed GhostGfxWindow.findClickedCellCenterMulti, which
wasn't releasing the gfx lock if no voxel was clicked.

Display an image and select some voxels.  Hide the image.  The
selected voxels are still displayed, but the display doesn't update
when the selection is modified.  Either they voxels shoudn't be
displayed, or they should be updated.
** Fixed: 2018-05-22. PixelSelectionDisplay.whoChanged calls setEmpty
if there's nothing to display.

When a click doesn't result in a selection because it went to a layer
that can't handle it, display a warning.
** Done: 2018-05-23

Skeleton boundary display isn't working.
** Fixed: 2018-05-24

Cloning a graphics window raises an assertion error in
pixelselectionmethodGUI.py, even if nothing is displayed in the
window.
** Fixed: 2018-05-24. RectangularPrismSelectorGUI no longer assumes that
its VoxelRegionSelectionDisplay already exists.

Abaqus output for Meshes is still slow.
** Fixed: 2018-05-31.  Moved node indexing to C++.

Change the abaqus element type in skeleton output to C3D4.  In mesh
abaqus output it should be C3D4 or C3D10.
** Avoided: changed the comments in the files and don't guess at abaqus
element types at all.

Segment Info toolbox isn't working.  Wrong segment is queried by mouse
click.  Node groups aren't reported in Skeleton Info toolbox.  Segment
groups aren't reported either, but the widget says "<Not yet
implemented>".  The various "groups" fields aren't updated when group
membership changes.
** Fixed: 2018-06-12, except for the wrong segment being queried,
which seems to have been fixed already.

Remove opacity param from MicrostructureMaterialDisplay?  Is it used?
It's passed through to vtkActor::GetProperty()->SetOpacity(), but it
doesn't have any effect on what's displayed.  [Also, there's a TODO
asking if ImageCanvasLayer::set_opacity() works. -- Fixed]
** Fixed: 2018-06-12  MicrostructureMaterialDisplay was redefing too
much of BitMapDisplayMethod.

Fix Bug: Last gfx layer created isn't included in loop in
setLayerOffsetParameters().  Is it being called too soon?
** Fixed: 2018-06-13.  sortLayers() was being called before
layer.build() in GhostGfxWindow.

Opacity works for Image layers but not Microstructure Material
displays. ?
** Fixed at some point, apparently.  It works now. 

The Box widget for selecting voxels shouldn't be visible unless the
Voxel Selection method is set to Box, and should be dimmed when its
toolbox isn't active.  Mouse-down on one side of the box should
highlight that side, so the user knows which side has been clicked.
Should image and/or microstructure layers automatically become
translucent when the box widget is active?  Maybe there should be
options for making the image translucent, and for dimming or hiding
the box when the widget isn't active.
** Done.

Fix bug: Selected element display layer is not updated during
annealing after the first step, or at the end.
** Done 2018-09-28

When using the Box voxel selector, clicking "Done" or "Cancel"
sometimes leaves the image translucent.  Also, the corner0 and corner1
fields should not be active, or editing them should change the box.
** Fixed 2018-09-28

Fix bug: Deselecting (control-click) a boundary in the skeleton
boundary page when graphics window is open causes a vtk warning:
  Warning: In /Users/langer/UTIL/VTK/VTK-8.1.1/Filters/Geometry/vtkDataSetSurfaceFilter.cxx, line 169
  vtkDataSetSurfaceFilter (0x7fbe4cc4d160): Number of cells is zero,
  no  data to process.
Same warning occurs when selecting a new boundary if the new one is of
a different type than the previous one.
** Fixed 2018-09-28.  CanvasLayer.setEmpty wasn't being called.
